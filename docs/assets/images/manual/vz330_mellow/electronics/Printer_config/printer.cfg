### For Fly Super 8 V1.3 ####
### And Mellow Kit  ####
### For Fly Super pro 8, the SPI bus is spi1A
### For Fly Super 8 V1.3, the SPI bus is spi3

[include mainsail.cfg]
[include timelapse.cfg]
[include Exclude_Object.cfg]
[display_status]
[exclude_object]
[virtual_sdcard]
path: ~/gcode_files
[pause_resume]
recover_velocity: 350


##### VzBoT############
#######################

[printer]
kinematics: corexy
max_velocity: 2500
max_accel: 10000
#max_accel_to_decel: 5000
max_z_velocity: 20
max_z_accel: 1500
square_corner_velocity: 10

########################
########################


[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f407xx_3E0023000E47323236333832-if00  # put your own Serial here.
#restart_method: command

[temperature_sensor FLY-Super8]
sensor_type: temperature_mcu

[mcu rpi]
serial: /tmp/klipper_host_mcu

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

########################
########################

[stepper_x]
##	in M6 position
step_pin: PE0
dir_pin: PG3
enable_pin: !PG4
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 200  
endstop_pin: PF10            #make sure to set the correct pin here.
position_endstop: 0
position_min: 0
position_max: 330
homing_speed: 50 
homing_retract_dist: 0

[tmc5160 stepper_x] 
spi_software_sclk_pin: PB3
spi_software_miso_pin: PB4
spi_software_mosi_pin: PB5
cs_pin: PG2
interpolate: false
run_current: 2
sense_resistor: 0.033
stealthchop_threshold: 0
driver_TBL: 0
driver_TOFF: 1


[stepper_x1]
##	in M5 position
step_pin: PE1
dir_pin: !PF0
enable_pin: !PC15
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 200
#endstop_pin: tmc5160_stepper_x:virtual_endstop 

[tmc5160 stepper_x1]
spi_software_sclk_pin: PB3
spi_software_miso_pin: PB4
spi_software_mosi_pin: PB5
cs_pin: PF1
interpolate: false
run_current: 2
sense_resistor: 0.033
stealthchop_threshold: 0
driver_TBL: 0
driver_TOFF: 1 

[stepper_y]
##	in M4 position
step_pin: PE15
dir_pin: !PE11
enable_pin: !PF2
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 200  
endstop_pin: PC0                 #make sure to set the correct pin here.
position_endstop: -0
position_min: 0
position_max: 330
homing_speed: 50  
homing_retract_dist: 0

[tmc5160 stepper_y] 
spi_software_sclk_pin: PB3
spi_software_miso_pin: PB4
spi_software_mosi_pin: PB5
cs_pin: PE10
interpolate: false
run_current: 2
sense_resistor: 0.033
stealthchop_threshold: 0
driver_TBL: 0
driver_TOFF: 1

[stepper_y1]
##	in M3 position
step_pin: PE14
dir_pin: PE8
enable_pin: !PE9
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 200
#endstop_pin: tmc5160_stepper_y:virtual_endstop  

[tmc5160 stepper_y1] 
spi_software_sclk_pin: PB3
spi_software_miso_pin: PB4
spi_software_mosi_pin: PB5
cs_pin: PE7
interpolate: false
run_current: 2
sense_resistor: 0.033
stealthchop_threshold: 0
driver_TBL: 0
driver_TOFF: 1

#########################

[stepper_z]
## In M1 position
step_pin: PE3
dir_pin: !PF13
enable_pin: !PF14
microsteps: 32
rotation_distance: 4
endstop_pin:               #make sure to set the correct pin here.
#position_endstop: 0.0
position_max: 400
full_steps_per_rotation: 200
homing_retract_dist: 5.0
homing_positive_dir: false
homing_speed: 5.0
second_homing_speed: 2.5

[tmc2209 stepper_z]
interpolate: false
uart_pin: PF12
run_current: 1.2
stealthchop_threshold: 0

[extruder]
## In M0 position
### Vz-HextrudORT
step_pin: PE2
dir_pin: PC5
enable_pin: !PF11
microsteps: 16
#Alu VZhextrudort Moons 8T
rotation_distance: 22.2
Gear_ratio: 50:8
#Alu VZhextrudort Moons 10T
#rotation_distance: 22 
#gear_ratio: 50:10 
#VZHextrudort LDO 20mm
#rotation_distance: 4.71
nozzle_diameter: 0.5
filament_diameter: 1.750

heater_pin: PB0
sensor_type: PT1000
sensor_pin: PF4

#control: pid
#pid_Kp=28.737 
#pid_Ki=1.935 
#pid_Kd=106.684
min_temp: 0
max_temp: 400
full_steps_per_rotation: 200
max_extrude_only_distance: 1000.0
max_extrude_cross_section: 500
max_extrude_only_velocity: 200
max_extrude_only_accel: 10000
min_extrude_temp: 0
pressure_advance: 0.02
pressure_advance_smooth_time: 0.03

[tmc2209 extruder]
uart_pin: PC4
interpolate: false
run_current: 0.7
sense_resistor: 0.110

########################
########################

[heater_bed]
heater_pin: PE5
sensor_type: Generic 3950
sensor_pin: PC1
#control: pid
#pid_Kp: 66.746
#pid_Ki: 3.504
#pid_Kd: 317.878
min_temp: 0
max_temp: 130


########################
#### FANS ##############
########################

[fan]
##	Print Cooling Fan - GPIO26
pin: rpi:gpio26
max_power: 1
cycle_time: 0.002
hardware_pwm: false
shutdown_speed: 0

[heater_fan hotend_fan]
##	Hotend Fan - FAN0 Connector
## in case of watercooler that is 24V use a Heater Pin like PF7 Heat3 for a larger mosfet that can handle more amps.
pin: PF7
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0

#[fan_generic Exhaust_fan]
##  exhaust fan - In FAN4
#pin: PA15
#max_power: 1
#shutdown_speed: 0
#kick_start_time: 0.1
#off_below: 0.10

#[fan_generic chamber_fan]
###  chamber fan - In FAN9 Positon
#pin: PD15
#max_power: 1
#shutdown_speed: 0
#kick_start_time: 0.1
#off_below: 0.10

#[fan_generic RSCS]
##  RSCS Fans - In FAN1 Positon
#pin: PA1
#max_power: 1
#shutdown_speed: 0
#kick_start_time: 0.1
#off_below: 0.10

[controller_fan driver_fan] 
# This is if you connect your driver fan to Super8 
#or if you want to add fan to the Super8. Other wise connect them in the driver fan ports
stepper: stepper_x
pin: PD14
max_power: 1
shutdown_speed: 0
kick_start_time: 0.1
off_below: 0.10

########################
########################

#[temperature_sensor chamber]  optional for chamber temp
#sensor_type: NTC 100K MGB18-104F39050L32
#pullup_resistor: 4700
#sensor_pin: PF5
#min_temp: 0
#max_temp: 60
#gcode_id: C: C

#[temperature_sensor Bed_Edge]
#Sensor_type: Generic 3950
#sensor_pin:PF4

###########################################
#########Custom PINs Definition ############
###########################################

[output_pin LED]
#In FAN8 position if 12 or 5V
#When 24V use a heater pin like Heat4 PF6
pin: PF6
pwm: false
value: 1
shutdown_value:1
### gcode command: SET_PIN PIN=LED value=0 to 1

################################################################################################
################################################################################################
#####				MACROS					

##################

########################	

[gcode_macro Disable_Steppers]
gcode:
    M84
#### 
# To make your print_start macro work you need to put a bit of code in your slicer too. Put this in the: Start G-code in SS at printer settings and then Custom G-code. Put in the code down below there.
#
#    PRINT_START EXTRUDER_TEMP={first_layer_temperature[initial_extruder] + extruder_temperature_offset[initial_extruder]} BED_TEMP=[first_layer_bed_temperature]
####
#    In your End G-code you simply put:
#    print_end    ;end script from macro
####

[gcode_macro PRINT_START]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(100)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Start bed heating
    M140 S{BED_TEMP}
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    M117 Homing...                 ; display message
    G28
    G1 Z20.0 F600 ;move the platform down 15mm
    G1 X20 Y20 F3000
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    G1 X1.8 Y10 F3000
    G1 Z0.24 F240
    G92 E0 ;zero the extruded length again
    G1 Y190 E15.0 F1500.0 ; intro line
    G1 X2.3 F5000
    G1 Y10 E30 F1200.0 ; intro line
    G92 E0.0 ;zero the extruded length again
    G1 F9000
    M117 Printing...

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script
gcode:
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    
    #   Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 15) %}
        {% set x_safe = 10.0 %}
    {% else %}
        {% set x_safe = -10.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 15) %}
        {% set y_safe = 10.0 %}
    {% else %}
        {% set y_safe = -10.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 50.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    
    #  Commence PRINT_END
    M400                             ; wait for buffer to clear
    G92 E0                           ; zero the extruder
    G1 E-4.0 F3600                   ; retract
    G91                              ; relative positioning
    G0 Z{z_safe} + Z10 F3600         ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    M104 S0                          ; turn off hotend
    M140 S0                          ; turn off bed
    M106 S0                          ; turn off fan
    G90                              ; absolute positioning
    G0 X{max_x / 2} Y{max_y - 5} F3600   ; park nozzle at rear
    M84
    BED_MESH_CLEAR
    SET_HEATER_TEMPERATURE HEATER=chamber TARGET=0
    M117 Finished!

### Speed test macro.
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    #Home
    #G28

	# Go to starting position
	G0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min+10} Y{y_min+10} F{speed*60}
			G0 X{x_max-30} Y{y_max-30} F{speed*60}
			G0 X{x_min+10} Y{y_min+10} F{speed*60}
			G0 X{x_max-30} Y{y_max-30} F{speed*60}
			G0 X{x_min+10} Y{y_min+10} F{speed*60}
			G0 X{x_max-30} Y{y_max-30} F{speed*60}
			
			# Box
			G0 X{x_min+10} Y{y_min+10} F{speed*60}
			G0 X{x_min+10} Y{y_max-30} F{speed*60}
			G0 X{x_max-30} Y{y_max-30} F{speed*60}
			G0 X{x_max-30} Y{y_min+10} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED
    G0 X115 Y115 Z30

[gcode_macro exhaustfan_on]
gcode: 
	SET_FAN_SPEED FAN=Exhaust_fan SPEED=1
###	
	
[gcode_macro exhaustfan_off]
gcode: 
	SET_FAN_SPEED FAN=Exhaust_fan SPEED=0
	
	
###		
	
[gcode_macro enclosurefan_on]
gcode: 
	SET_FAN_SPEED FAN=chamber_fan SPEED=1

###			
	
[gcode_macro enclosurefan_off]
gcode: 
	SET_FAN_SPEED FAN=chamber_fan SPEED=0


[gcode_macro RSCS_on]
gcode: 
	SET_FAN_SPEED FAN=RSCS SPEED=1
###	
	

[gcode_macro RSCS_off]
gcode: 
	SET_FAN_SPEED FAN=RSCS SPEED=0
		
###

[gcode_macro LED_on]
gcode:
	SET_PIN PIN=LED value=1   


[gcode_macro LED_off]
gcode:
	SET_PIN PIN=LED value=0  

###	
	
[gcode_macro PA_tunning]
gcode: 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005


[gcode_macro TEST_RESONNANCES_X]
gcode:
 TEST_RESONANCES AXIS=X


[gcode_macro TEST_RESONNANCES_Y]
gcode:
 TEST_RESONANCES AXIS=Y

[gcode_macro Automatic_Inputshaper]
gcode:
  SHAPER_CALIBRATE
  Save_config


[gcode_macro enable_stepper]
gcode:
 SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1


[gcode_macro PID_Calibrate_dropdown]
gcode:
    {% set heater = params.HEATER|string %}
    {% set target = params.TARGET|int %}
    PID_CALIBRATE HEATER={heater} TARGET={target}
################################################################################################
################################################################################################

[idle_timeout]
timeout: 1800
gcode =
  {% if printer.pause_resume.is_paused %}
    M104 S0
  {% else %}
    TURN_OFF_HEATERS
    #M84
  {% endif %}


################################################################################################
##                                        Probe                                               ##
################################################################################################

#[bed_screws]
#screw1: 20,20
#screw2: 20,290
#screw3: 290,290
#screw4: 290,20
